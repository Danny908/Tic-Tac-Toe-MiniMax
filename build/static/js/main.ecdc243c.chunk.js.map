{"version":3,"sources":["minimax.js","App.js","serviceWorker.js","index.js"],"names":["scores","X","O","tie","minimax","board","depth","isMaximizing","result","checkWinner","bestScore","Infinity","Number","isInteger","i","j","score","Math","max","min","emptyTile","some","b","App","canvasRef","useState","Array","fill","map","setBoard","winner","setWinner","isPlayerTurn","setPlayerTurn","tile","setTile","circle","ctx","x","y","r","strokeStyle","beginPath","arc","PI","stroke","cross","offset","moveTo","lineTo","useEffect","move","_board","bx","by","aiTurn","centerX","centerY","getContext","size","width","clearRect","draw","className","ref","onMouseUp","e","position","getBoundingClientRect","floor","clientX","clientY","playerTurn","height","href","target","rel","viewBox","d","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ecdc243c.chunk.js","sourcesContent":["// Minimax values\nconst scores = {\n  X: 10,\n  O: -10,\n  tie: 0,\n};\nexport function minimax(board, depth, isMaximizing) {\n  let result = checkWinner(board);\n  let bestScore = isMaximizing ? -Infinity : Infinity;\n\n  // Stop recursive calls if winner or game end\n  if (Number.isInteger(result)) {\n    // Return game status\n    return result;\n  }\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      // Check if tile is empty\n      if (board[i][j] === null) {\n        board[i][j] = isMaximizing ? \"O\" : \"X\";\n        // Recursive call, see all posible combinations\n        const score = minimax(board, depth + 1, !isMaximizing);\n        // Clear last board conbination\n        board[i][j] = null;\n        // Update best score, depending if is maximizing or minimizing\n        bestScore = isMaximizing\n          ? Math.max(score, bestScore)\n          : Math.min(score, bestScore);\n      }\n    }\n  }\n  // Return best score\n  return bestScore;\n}\n\nexport function checkWinner(board) {\n  let result = null;\n  let emptyTile;\n\n  for (let i = 0; i < 3; i++) {\n    // Check horizontal\n    if (\n      board[i][0] === board[i][1] &&\n      board[i][1] === board[i][2] &&\n      board[i][0] !== null\n    ) {\n      result = scores[board[i][0]];\n      break;\n      // Check vertical\n    } else if (\n      board[0][i] === board[1][i] &&\n      board[1][i] === board[2][i] &&\n      board[0][i] !== null\n    ) {\n      result = scores[board[0][i]];\n      break;\n    }\n    // Check if game is tie\n    if (board[i].some((b) => b === null)) {\n      emptyTile = true;\n    }\n  }\n  // Check diagonal\n  if (\n    ((board[0][0] === board[1][1] && board[1][1] === board[2][2]) ||\n      (board[2][0] === board[1][1] && board[1][1] === board[0][2])) &&\n    board[1][1] !== null\n  ) {\n    result = scores[board[1][1]];\n  }\n\n  if (!emptyTile && !result) {\n    result = scores.tie;\n  }\n\n  return Number.isInteger(result) ? result : null;\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport { minimax, checkWinner } from \"./minimax.js\";\n\nfunction App() {\n  // Create board\n  const [board, setBoard] = useState(\n    new Array(3).fill().map(() => new Array(3).fill(null))\n  );\n  const [winner, setWinner] = useState(null);\n  const [isPlayerTurn, setPlayerTurn] = useState(false);\n  const [tile, setTile] = useState(null);\n  let canvasRef;\n\n  // Draw board on canvas\n  const draw = () => {\n    const ctx = canvasRef.getContext(\"2d\");\n    const { width: size } = canvasRef;\n    const tile = size / 3;\n    let centerX;\n    let centerY;\n\n    // Clean board on every draw update\n    ctx.clearRect(0, 0, size, size);\n    for (let i = 0; i <= 2; i++) {\n      // Draw horizontal lines\n      ctx.strokeStyle = \"black\";\n      ctx.beginPath();\n      ctx.moveTo(0, tile * i + 1);\n      ctx.lineTo(size, tile * i + 1);\n      ctx.stroke();\n      // Draw vertical lines\n      ctx.moveTo(tile * i + 1, 0);\n      ctx.lineTo(tile * i + 1, size);\n      ctx.stroke();\n      // Draw board state\n      for (let j = 0; j <= 2; j++) {\n        centerX = tile * (j + 1) - tile / 2;\n        centerY = tile * (i + 1) - tile / 2;\n        if (board[i][j] === \"X\") {\n          cross(ctx, centerX, centerY, 50);\n        } else if (board[i][j] === \"O\") {\n          circle(ctx, centerX, centerY, 50);\n        }\n      }\n    }\n    setTile(size / 3);\n  };\n\n  const circle = (ctx, x, y, r) => {\n    ctx.strokeStyle = \"red\";\n    ctx.beginPath();\n    ctx.arc(x, y, r, 0, 2 * Math.PI);\n    ctx.stroke();\n  };\n\n  const cross = (ctx, x, y, offset) => {\n    ctx.strokeStyle = \"blue\";\n    ctx.beginPath();\n    ctx.moveTo(x - offset, y - offset);\n    ctx.lineTo(x + offset, y + offset);\n    ctx.stroke();\n    ctx.moveTo(x + offset, y - offset);\n    ctx.lineTo(x - offset, y + offset);\n    ctx.stroke();\n  };\n\n  const playerTurn = (e) => {\n    // Deep array copy - New array instance\n    const _board = board.map((bx) => bx.map((by) => by));\n    const position = canvasRef.getBoundingClientRect();\n    const i = Math.floor((e.clientX - position.x) / tile);\n    const j = Math.floor((e.clientY - position.y) / tile);\n\n    if (!_board[j][i]) {\n      _board[j][i] = \"O\";\n      setPlayerTurn(!isPlayerTurn);\n      setBoard(_board);\n      setWinner(checkWinner(_board));\n    }\n  };\n\n  const aiTurn = () => {\n    // Deep array copy - New array instance\n    const _board = board.map((bx) => bx.map((by) => by));\n    let bestScore = -Infinity;\n    let move;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (!_board[i][j]) {\n          _board[i][j] = \"X\";\n          const score = minimax(_board, 0, false);\n          _board[i][j] = null;\n          if (score > bestScore) {\n            bestScore = score;\n            move = { i, j };\n          }\n        }\n      }\n    }\n    // Set AI move\n    if (move) {\n      _board[move.i][move.j] = \"X\";\n      setPlayerTurn(!isPlayerTurn);\n      setBoard(_board);\n      setWinner(checkWinner(_board));\n    }\n  };\n\n  // Make AI Movement && Update Canvas Every Time Board Change\n  useEffect(() => {\n    if (!isPlayerTurn && !winner) {\n      aiTurn();\n    }\n    draw();\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>\n        {winner === null\n          ? \"Game on Course!\"\n          : winner === 0\n          ? \"Game Tie!\"\n          : winner === 10\n          ? \"AI Win!\"\n          : \"Player Win!\"}\n      </h1>\n      <canvas\n        ref={(ref) => (canvasRef = ref)}\n        onMouseUp={(e) => isPlayerTurn && winner === null && playerTurn(e)}\n        width=\"500px\"\n        height=\"500px\"\n      ></canvas>\n      <a\n        href=\"https://github.com/Danny908/Tic-Tac-Toe-MiniMax\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <svg height=\"60\" viewBox=\"0 0 16 16\" width=\"60\">\n          <path\n            fill=\"#ffffff\"\n            d=\"M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z\"\n          ></path>\n        </svg>\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}